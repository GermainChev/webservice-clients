// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace EbiWS.PsiBlastWs {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="JDispatcherServiceHttpPort", Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JDispatcherService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback runOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getResultTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback getParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getParameterDetailsOperationCompleted;
        
        public JDispatcherService() {
            this.Url = "http://www.ebi.ac.uk/Tools/services/soap/psiblast";
        }
        
        public JDispatcherService(string url) {
            this.Url = url;
        }
        
        public event runCompletedEventHandler runCompleted;
        
        public event getStatusCompletedEventHandler getStatusCompleted;
        
        public event getResultTypesCompletedEventHandler getResultTypesCompleted;
        
        public event getResultCompletedEventHandler getResultCompleted;
        
        public event getParametersCompletedEventHandler getParametersCompleted;
        
        public event getParameterDetailsCompletedEventHandler getParameterDetailsCompleted;
        
        /// <remarks>
///Submit an analysis job
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Run", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("jobId")]
        public string run(string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title, InputParameters parameters) {
            object[] results = this.Invoke("run", new object[] {
                        email,
                        title,
                        parameters});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult Beginrun(string email, string title, InputParameters parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("run", new object[] {
                        email,
                        title,
                        parameters}, callback, asyncState);
        }
        
        public string Endrun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void runAsync(string email, string title, InputParameters parameters) {
            this.runAsync(email, title, parameters, null);
        }
        
        public void runAsync(string email, string title, InputParameters parameters, object userState) {
            if ((this.runOperationCompleted == null)) {
                this.runOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrunCompleted);
            }
            this.InvokeAsync("run", new object[] {
                        email,
                        title,
                        parameters}, this.runOperationCompleted, userState);
        }
        
        private void OnrunCompleted(object arg) {
            if ((this.runCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.runCompleted(this, new runCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get the status of a submitted job
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStatus", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string getStatus(string jobId) {
            object[] results = this.Invoke("getStatus", new object[] {
                        jobId});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetStatus(string jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getStatus", new object[] {
                        jobId}, callback, asyncState);
        }
        
        public string EndgetStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getStatusAsync(string jobId) {
            this.getStatusAsync(jobId, null);
        }
        
        public void getStatusAsync(string jobId, object userState) {
            if ((this.getStatusOperationCompleted == null)) {
                this.getStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatusCompleted);
            }
            this.InvokeAsync("getStatus", new object[] {
                        jobId}, this.getStatusOperationCompleted, userState);
        }
        
        private void OngetStatusCompleted(object arg) {
            if ((this.getStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatusCompleted(this, new getStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get the list of renderers available to output a job result (i.e. the list of available output types)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResultTypes", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(ElementName="resultTypes")]
        [return: System.Xml.Serialization.XmlArrayItem(ElementName="type", IsNullable=false)]
        public wsResultType[] getResultTypes(string jobId) {
            object[] results = this.Invoke("getResultTypes", new object[] {
                        jobId});
            return ((wsResultType[])(results[0]));
        }
        
        public System.IAsyncResult BegingetResultTypes(string jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getResultTypes", new object[] {
                        jobId}, callback, asyncState);
        }
        
        public wsResultType[] EndgetResultTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((wsResultType[])(results[0]));
        }
        
        public void getResultTypesAsync(string jobId) {
            this.getResultTypesAsync(jobId, null);
        }
        
        public void getResultTypesAsync(string jobId, object userState) {
            if ((this.getResultTypesOperationCompleted == null)) {
                this.getResultTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultTypesCompleted);
            }
            this.InvokeAsync("getResultTypes", new object[] {
                        jobId}, this.getResultTypesOperationCompleted, userState);
        }
        
        private void OngetResultTypesCompleted(object arg) {
            if ((this.getResultTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultTypesCompleted(this, new getResultTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get a job result formatted using a particular renderer
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResult", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("output", IsNullable=true)]
        public byte[] getResult(string jobId, string type, [System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(ElementName="parameter", IsNullable=false)] wsRawOutputParameter[] parameters) {
            object[] results = this.Invoke("getResult", new object[] {
                        jobId,
                        type,
                        parameters});
            return ((byte[])(results[0]));
        }
        
        public System.IAsyncResult BegingetResult(string jobId, string type, wsRawOutputParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getResult", new object[] {
                        jobId,
                        type,
                        parameters}, callback, asyncState);
        }
        
        public byte[] EndgetResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        public void getResultAsync(string jobId, string type, wsRawOutputParameter[] parameters) {
            this.getResultAsync(jobId, type, parameters, null);
        }
        
        public void getResultAsync(string jobId, string type, wsRawOutputParameter[] parameters, object userState) {
            if ((this.getResultOperationCompleted == null)) {
                this.getResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultCompleted);
            }
            this.InvokeAsync("getResult", new object[] {
                        jobId,
                        type,
                        parameters}, this.getResultOperationCompleted, userState);
        }
        
        private void OngetResultCompleted(object arg) {
            if ((this.getResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultCompleted(this, new getResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List the names of the parameters available before submission
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameters", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(ElementName="parameters")]
        [return: System.Xml.Serialization.XmlArrayItem(ElementName="id", IsNullable=false)]
        public string[] getParameters() {
            object[] results = this.Invoke("getParameters", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetParameters(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getParameters", new object[0], callback, asyncState);
        }
        
        public string[] EndgetParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getParametersAsync() {
            this.getParametersAsync(null);
        }
        
        public void getParametersAsync(object userState) {
            if ((this.getParametersOperationCompleted == null)) {
                this.getParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetParametersCompleted);
            }
            this.InvokeAsync("getParameters", new object[0], this.getParametersOperationCompleted, userState);
        }
        
        private void OngetParametersCompleted(object arg) {
            if ((this.getParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getParametersCompleted(this, new getParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get some details about a parameter (e.g. name, description, values, etc.)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameterDetails", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("parameterDetails")]
        public wsParameterDetails getParameterDetails(string parameterId) {
            object[] results = this.Invoke("getParameterDetails", new object[] {
                        parameterId});
            return ((wsParameterDetails)(results[0]));
        }
        
        public System.IAsyncResult BegingetParameterDetails(string parameterId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getParameterDetails", new object[] {
                        parameterId}, callback, asyncState);
        }
        
        public wsParameterDetails EndgetParameterDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((wsParameterDetails)(results[0]));
        }
        
        public void getParameterDetailsAsync(string parameterId) {
            this.getParameterDetailsAsync(parameterId, null);
        }
        
        public void getParameterDetailsAsync(string parameterId, object userState) {
            if ((this.getParameterDetailsOperationCompleted == null)) {
                this.getParameterDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetParameterDetailsCompleted);
            }
            this.InvokeAsync("getParameterDetails", new object[] {
                        parameterId}, this.getParameterDetailsOperationCompleted, userState);
        }
        
        private void OngetParameterDetailsCompleted(object arg) {
            if ((this.getParameterDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getParameterDetailsCompleted(this, new getParameterDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks>
///Input parameters for the tool
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class InputParameters {
        
        /// <remarks>
///Matrix [The comparison matrix to be used to score alignments when searching the database]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string matrix;
        
        /// <remarks>
///Gap open [Penalty taken away from the score when a gap is created in sequence. Increasing the gap openning penalty will decrease the number of gaps in the final alignment.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> gapopen;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool gapopenSpecified;
        
        /// <remarks>
///Gap extend [Penalty taken away from the score for each base or residue in the gap. Increasing the gap extension penalty favors short gaps in the final alignment, conversly decreasing the gap extension penalty favors long gaps in the final alignment.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> gapext;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool gapextSpecified;
        
        /// <remarks>
///Expectation value threshold [Limits the number of scores and alignments reported based on the expectation value. This is the maximum number of times the match is expected to occur by chance.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="double")]
        public System.Nullable<double> expthr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool expthrSpecified;
        
        /// <remarks>
///PSI-BLAST threshold [Expectation value threshold for automatic selection of matched sequences for inclusion in PSSM at each iteration.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="double")]
        public System.Nullable<double> psithr;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool psithrSpecified;
        
        /// <remarks>
///Scores [Maximum number of match score summaries reported in the result output.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> scores;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool scoresSpecified;
        
        /// <remarks>
///Alignments [Maximum number of match alignments reported in the result output.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> alignments;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool alignmentsSpecified;
        
        /// <remarks>
///Align views [Formating for the alignments]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> alignView;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool alignViewSpecified;
        
        /// <remarks>
///Dropoff [The amount a score can drop before extension of word hits is halted]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> dropoff;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool dropoffSpecified;
        
        /// <remarks>
///Final Dropoff [Dropoff value for final gapped alignment]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> finaldropoff;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool finaldropoffSpecified;
        
        /// <remarks>
///Filter [Filter regions of low sequence complexity. This can avoid issues with low complexity sequences where matches are found due to composition rather than meaningful sequence similarity. However in some cases filtering also masks regions of interest and so should be used with caution.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string filter;
        
        /// <remarks>
///Sequence range [Specify a range or section of the input sequence to use in the search. Example: Specifying '34-89' in an input sequence of total length 100, will tell BLAST to only use residues 34 to 89, inclusive.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string seqrange;
        
        /// <remarks>
///Sequence [A free text (raw) sequence is simply a block of characters representing a DNA/RNA or Protein sequence. The sequence can be be in GCG, FASTA, EMBL, GenBank, PIR, NBRF, Phylip or UniProtKB/Swiss-Prot format. Partially formatted sequences are not accepted. Adding a return to the end of the sequence may help certain applications understand the input. Note that directly using data from word processors may yield unpredictable results as hidden/control characters may be present.]
///</remarks>
        public string sequence;
        
        /// <remarks>
///Database [The databases to run the sequence similarity search against. Multiple databases can be used at the same time]
///</remarks>
        public string database;
        
        /// <remarks>
///Previous Iteration Job Id [The job identifier for the previous PSI-BLAST iteration.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string previousjobid;
        
        /// <remarks>
///Selected Hits [List of identifiers of the hits from the previous iteration to use to construct the search PSSM for this iteration.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public byte[] selectedHits;
        
        /// <remarks>
///Checkpoint File [Checkpoint file from the previous iteration. Must be in ASN.1 Binary Format.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public byte[] cpfile;
    }
    
    /// <remarks>
///Details about a renderer used to output the result of the job
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsResultType {
        
        /// <remarks>
///A short description of the renderer
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description;
        
        /// <remarks>
///A suggested file suffix to be used when saving the data formatted by the renderer
///</remarks>
        public string fileSuffix;
        
        /// <remarks>
///The renderer identifier to be used when invoking the getResult() method
///</remarks>
        public string identifier;
        
        /// <remarks>
///A more appropriate name for the renderer (more meaningful than the identifier)
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string label;
        
        /// <remarks>
///The media type (MIME) of the renderer's output
///</remarks>
        public string mediaType;
    }
    
    /// <remarks>
///A parameter used by the renderer
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsRawOutputParameter {
        
        /// <remarks>
///The name of the parameter
///</remarks>
        public string name;
        
        /// <remarks/>
        public string[] value;
    }
    
    /// <remarks>
///Details about a tool parameter
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsParameterDetails {
        
        /// <remarks>
///The name of the parameter
///</remarks>
        public string name;
        
        /// <remarks>
///A short description of the parameter
///</remarks>
        public string description;
        
        /// <remarks>
///The type of the parameter
///</remarks>
        public string type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(ElementName="value", IsNullable=false)]
        public wsParameterValue[] values;
    }
    
    /// <remarks>
///The details about a parameter values
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsParameterValue {
        
        /// <remarks>
///A meaningful label for the parameter value
///</remarks>
        public string label;
        
        /// <remarks>
///The real value
///</remarks>
        public string value;
        
        /// <remarks>
///A flag indicating whether this value is a default value or not
///</remarks>
        public bool defaultValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(ElementName="property", IsNullable=false)]
        public wsProperty[] properties;
    }
    
    /// <remarks>
///A key/value pair association of information
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsProperty {
        
        /// <remarks/>
        public string key;
        
        /// <remarks/>
        public string value;
    }
    
    public partial class runCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal runCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void runCompletedEventHandler(object sender, runCompletedEventArgs args);
    
    public partial class getStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getStatusCompletedEventHandler(object sender, getStatusCompletedEventArgs args);
    
    public partial class getResultTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public wsResultType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((wsResultType[])(this.results[0]));
            }
        }
    }
    
    public delegate void getResultTypesCompletedEventHandler(object sender, getResultTypesCompletedEventArgs args);
    
    public partial class getResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    public delegate void getResultCompletedEventHandler(object sender, getResultCompletedEventArgs args);
    
    public partial class getParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getParametersCompletedEventHandler(object sender, getParametersCompletedEventArgs args);
    
    public partial class getParameterDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getParameterDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public wsParameterDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((wsParameterDetails)(this.results[0]));
            }
        }
    }
    
    public delegate void getParameterDetailsCompletedEventHandler(object sender, getParameterDetailsCompletedEventArgs args);
}
