// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace EbiWS.GeneWiseWs {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="JDispatcherServiceHttpPort", Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public class JDispatcherService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback runOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getResultTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback getParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getParameterDetailsOperationCompleted;
        
        public JDispatcherService() {
            this.Url = "http://www.ebi.ac.uk/Tools/services/soap/genewise";
        }
        
        private event runCompletedEventHandler runCompleted;
        
        private event getStatusCompletedEventHandler getStatusCompleted;
        
        private event getResultTypesCompletedEventHandler getResultTypesCompleted;
        
        private event getResultCompletedEventHandler getResultCompleted;
        
        private event getParametersCompletedEventHandler getParametersCompleted;
        
        private event getParameterDetailsCompletedEventHandler getParameterDetailsCompleted;
        
        /// <remarks>
///Submit an analysis job
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Run", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("jobId")]
        public string run(string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title, InputParameters parameters) {
            object[] results = this.Invoke("run", new object[] {
                email,
                title,
                parameters});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult Beginrun(string email, string title, InputParameters parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("run", new object[] {
                email,
                title,
                parameters}, callback, asyncState);
        }
        
        public string Endrun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void runAsync(string email, string title, InputParameters parameters) {
            this.runAsync(email, title, parameters, null);
        }
        
        public void runAsync(string email, string title, InputParameters parameters, object userState) {
            if ((this.runOperationCompleted == null)) {
                this.runOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrunCompleted);
            }
            this.InvokeAsync("run", new object[] {
                email,
                title,
                parameters}, this.runOperationCompleted, userState);
        }
        
        private void OnrunCompleted(object arg) {
            if ((this.runCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.runCompleted(this, new runCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get the status of a submitted job
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStatus", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("status")]
        public string getStatus(string jobId) {
            object[] results = this.Invoke("getStatus", new object[] {
                jobId});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BegingetStatus(string jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getStatus", new object[] {
                jobId}, callback, asyncState);
        }
        
        public string EndgetStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void getStatusAsync(string jobId) {
            this.getStatusAsync(jobId, null);
        }
        
        public void getStatusAsync(string jobId, object userState) {
            if ((this.getStatusOperationCompleted == null)) {
                this.getStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStatusCompleted);
            }
            this.InvokeAsync("getStatus", new object[] {
                jobId}, this.getStatusOperationCompleted, userState);
        }
        
        private void OngetStatusCompleted(object arg) {
            if ((this.getStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStatusCompleted(this, new getStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get the list of renderers available to output a job result (i.e. the list of available output types)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResultTypes", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(ElementName="resultTypes")]
        [return: System.Xml.Serialization.XmlArrayItem(ElementName="type", IsNullable=false)]
        public wsResultType[] getResultTypes(string jobId) {
            object[] results = this.Invoke("getResultTypes", new object[] {
                jobId});
            return ((wsResultType[])(results[0]));
        }
        
        public System.IAsyncResult BegingetResultTypes(string jobId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getResultTypes", new object[] {
                jobId}, callback, asyncState);
        }
        
        public wsResultType[] EndgetResultTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((wsResultType[])(results[0]));
        }
        
        public void getResultTypesAsync(string jobId) {
            this.getResultTypesAsync(jobId, null);
        }
        
        public void getResultTypesAsync(string jobId, object userState) {
            if ((this.getResultTypesOperationCompleted == null)) {
                this.getResultTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultTypesCompleted);
            }
            this.InvokeAsync("getResultTypes", new object[] {
                jobId}, this.getResultTypesOperationCompleted, userState);
        }
        
        private void OngetResultTypesCompleted(object arg) {
            if ((this.getResultTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultTypesCompleted(this, new getResultTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get a job result formatted using a particular renderer
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResult", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("output", IsNullable=true)]
        public byte[] getResult(string jobId, string type, [System.Xml.Serialization.XmlArray(IsNullable=true)] [System.Xml.Serialization.XmlArrayItem(ElementName="parameter", IsNullable=false)] wsRawOutputParameter[] parameters) {
            object[] results = this.Invoke("getResult", new object[] {
                jobId,
                type,
                parameters});
            return ((byte[])(results[0]));
        }
        
        public System.IAsyncResult BegingetResult(string jobId, string type, wsRawOutputParameter[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getResult", new object[] {
                jobId,
                type,
                parameters}, callback, asyncState);
        }
        
        public byte[] EndgetResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        public void getResultAsync(string jobId, string type, wsRawOutputParameter[] parameters) {
            this.getResultAsync(jobId, type, parameters, null);
        }
        
        public void getResultAsync(string jobId, string type, wsRawOutputParameter[] parameters, object userState) {
            if ((this.getResultOperationCompleted == null)) {
                this.getResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetResultCompleted);
            }
            this.InvokeAsync("getResult", new object[] {
                jobId,
                type,
                parameters}, this.getResultOperationCompleted, userState);
        }
        
        private void OngetResultCompleted(object arg) {
            if ((this.getResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getResultCompleted(this, new getResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///List the names of the parameters available before submission
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameters", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArray(ElementName="parameters")]
        [return: System.Xml.Serialization.XmlArrayItem(ElementName="id", IsNullable=false)]
        public string[] getParameters() {
            object[] results = this.Invoke("getParameters", new object[0]);
            return ((string[])(results[0]));
        }
        
        public System.IAsyncResult BegingetParameters(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getParameters", new object[0], callback, asyncState);
        }
        
        public string[] EndgetParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        public void getParametersAsync() {
            this.getParametersAsync(null);
        }
        
        public void getParametersAsync(object userState) {
            if ((this.getParametersOperationCompleted == null)) {
                this.getParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetParametersCompleted);
            }
            this.InvokeAsync("getParameters", new object[0], this.getParametersOperationCompleted, userState);
        }
        
        private void OngetParametersCompleted(object arg) {
            if ((this.getParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getParametersCompleted(this, new getParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get some details about a parameter (e.g. name, description, values, etc.)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameterDetails", RequestNamespace="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("parameterDetails")]
        public wsParameterDetails getParameterDetails(string parameterId) {
            object[] results = this.Invoke("getParameterDetails", new object[] {
                parameterId});
            return ((wsParameterDetails)(results[0]));
        }
        
        public System.IAsyncResult BegingetParameterDetails(string parameterId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getParameterDetails", new object[] {
                parameterId}, callback, asyncState);
        }
        
        public wsParameterDetails EndgetParameterDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((wsParameterDetails)(results[0]));
        }
        
        public void getParameterDetailsAsync(string parameterId) {
            this.getParameterDetailsAsync(parameterId, null);
        }
        
        public void getParameterDetailsAsync(string parameterId, object userState) {
            if ((this.getParameterDetailsOperationCompleted == null)) {
                this.getParameterDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetParameterDetailsCompleted);
            }
            this.InvokeAsync("getParameterDetails", new object[] {
                parameterId}, this.getParameterDetailsOperationCompleted, userState);
        }
        
        private void OngetParameterDetailsCompleted(object arg) {
            if ((this.getParameterDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getParameterDetailsCompleted(this, new getParameterDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks>
///Input parameters for the tool
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class InputParameters {
        
        /// <remarks>
///Show parameters in alignment [Show parameters in the output alignmment, as in genewise.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> para;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool paraSpecified;
        
        /// <remarks>
///Pretty ASCII view [Show pretty ASCII alignment viewing, as in genewise.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> pretty;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool prettySpecified;
        
        /// <remarks>
///Gene Structure [Show gene structure, as in genewise]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> genes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool genesSpecified;
        
        /// <remarks>
///Protein Translation [Show protein translation, breaking at frameshifts.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> trans;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool transSpecified;
        
        /// <remarks>
///cDNA [Show cDNA, as in genewise.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> cdna;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool cdnaSpecified;
        
        /// <remarks>
///EMBL Feature. [EMBL feature table format with CDS key.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> embl;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool emblSpecified;
        
        /// <remarks>
///Ace file gene structure [Show Ace file gene structure, as in genewise.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> ace;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool aceSpecified;
        
        /// <remarks>
///GFF output [Show Gene Feature Format file, as in genewise.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> gff;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool gffSpecified;
        
        /// <remarks>
///EMBL Feature for diana [Show EMBL FT format suitable for diana.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="boolean")]
        public System.Nullable<bool> diana;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool dianaSpecified;
        
        /// <remarks>
///Local/Global mode [Model in local/global mode. You should only put the model in global mode if you expect your protein homolog to have homology from start to end to the gene in the DNA sequence.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string init;
        
        /// <remarks>
///Splice site [Using splice model or GT/AG? Use the full blown model for splice sites, or a simplistic GT/AG. Generally if you are using a DNA sequence which is from human or worm, then leave this on. If you are using a very different (eg plant) species, switch it off.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string splice;
        
        /// <remarks>
///Null (Random) Model [The probability of the model has to compared to an alternative model (in fact to all alternative models which are possible) to allow proper Bayesian inference. This causes considerable difficulty in these algorithms because from a algorithmical point of view we would probably like to use an alternative model which is a single state, like the random model in profile-HMMs, where we can simply 'log-odd' the scored model, whereas from a biological point of view we probably want to use a full gene predicting alternative model.
///			In addition we need to account for the fact that the protein HMM or protein homolog probably does not extend over all the gene sequence, nor in fact does the gene have to be the only gene in the DNA sequence. This means that there are very good splice sites/poly-pyrimidine tracts outside of the 'matched' alignment can severely de-rail the alignment.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @null;
        
        /// <remarks>
///Algorithm [The solutions is different in the genewise21:93 compared to the genewise 6:23 algorithms. 
///			(1) In 6:23 we force the external match portions of the homology model to be identical to the alternative model, thus cancelling each other out. This is a pretty gross approximation and is sort of equivalent to the intron tie'ing. It makes things algorithmically easier... However this means a) 6:23 is nowhere near a probabilistic model and b) you really have to used a tied intron model in 6:23 otherwise very bad edge effects (final introns being ridiculously long) occur.
///			(2) In 21:93 we have a full probabilistic model on each side of the homology segment. This is not reported in the -pretty output but you can see it in the -alb output if you like. Do not trust the gene model outside of the homology segment however. By having these external gene model parts we can use all the gene model features safe in the knowledge that if the homology segments do not justify the match then the external part of the model will soak up the additional intron/py-tract/splice site biases.
///			]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string alg;
        
        /// <remarks>
///First Sequence [The protein sequence can be entered directly into this form. The sequence can be be in GCG, FASTA, EMBL, GenBank, PIR, NBRF, PHYLIP or UniProtKB/Swiss-Prot format. A partially formatted sequence is not accepted. Adding a return to the end of the sequence may help certain applications understand the input. Note that directly using data from word processors may yield unpredictable results as hidden/control characters may be present. There is a limit of 1MB for the sequence entry.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string asequence;
        
        /// <remarks>
///Second Sequence [The DNA sequence to be compared can be entered directly into the form. The sequence must be in a recognised format eg. GCG, FASTA, EMBL, GenBank. Partially formatted sequences are not accepted. Adding a return to the end of the sequence may help certain applications understand the input. Note that directly using data from word processors may yield unpredictable results as hidden/control characters may be present. There is a limit of 1MB for the sequence entry.]
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string bsequence;
    }
    
    /// <remarks>
///Details about a renderer used to output the result of the job
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsResultType {
        
        /// <remarks>
///A short description of the renderer
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description;
        
        /// <remarks>
///A suggested file suffix to be used when saving the data formatted by the renderer
///</remarks>
        public string fileSuffix;
        
        /// <remarks>
///The renderer identifier to be used when invoking the getResult() method
///</remarks>
        public string identifier;
        
        /// <remarks>
///A more appropriate name for the renderer (more meaningful than the identifier)
///</remarks>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string label;
        
        /// <remarks>
///The media type (MIME) of the renderer's output
///</remarks>
        public string mediaType;
    }
    
    /// <remarks>
///A parameter used by the renderer
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsRawOutputParameter {
        
        /// <remarks>
///The name of the parameter
///</remarks>
        public string name;
        
        /// <remarks/>
        public string[] value;
    }
    
    /// <remarks>
///Details about a tool parameter
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsParameterDetails {
        
        /// <remarks>
///The name of the parameter
///</remarks>
        public string name;
        
        /// <remarks>
///A short description of the parameter
///</remarks>
        public string description;
        
        /// <remarks>
///The type of the parameter
///</remarks>
        public string type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(ElementName="value", IsNullable=false)]
        public wsParameterValue[] values;
    }
    
    /// <remarks>
///The details about a parameter values
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsParameterValue {
        
        /// <remarks>
///A meaningful label for the parameter value
///</remarks>
        public string label;
        
        /// <remarks>
///The real value
///</remarks>
        public string value;
        
        /// <remarks>
///A flag indicating whether this value is a default value or not
///</remarks>
        public bool defaultValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(ElementName="property", IsNullable=false)]
        public wsProperty[] properties;
    }
    
    /// <remarks>
///A key/value pair association of information
///</remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.jdispatcher.ebi.ac.uk")]
    public partial class wsProperty {
        
        /// <remarks/>
        public string key;
        
        /// <remarks/>
        public string value;
    }
    
    public class runCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal runCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void runCompletedEventHandler(object sender, runCompletedEventArgs args);
    
    public class getStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void getStatusCompletedEventHandler(object sender, getStatusCompletedEventArgs args);
    
    public class getResultTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public wsResultType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((wsResultType[])(this.results[0]));
            }
        }
    }
    
    public delegate void getResultTypesCompletedEventHandler(object sender, getResultTypesCompletedEventArgs args);
    
    public class getResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    public delegate void getResultCompletedEventHandler(object sender, getResultCompletedEventArgs args);
    
    public class getParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    public delegate void getParametersCompletedEventHandler(object sender, getParametersCompletedEventArgs args);
    
    public class getParameterDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getParameterDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public wsParameterDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((wsParameterDetails)(this.results[0]));
            }
        }
    }
    
    public delegate void getParameterDetailsCompletedEventHandler(object sender, getParameterDetailsCompletedEventArgs args);
}
