'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Mono Runtime Version: 2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Explicit On
Option Strict On


Namespace EbiWs.WSDbfetchWs
    
    '''<remarks/>
    '''<remarks>
'''
'''WSDbfetch: entry retrieval using entry identifiers or accession numbers for 
'''various biological databases, including EMBL-Bank, InterPro, MEDLINE, Patent 
'''Proteins, PDB, RefSeq, UniParc, UniProtKB and UniRef.
'''
'''Note: this is a document/literal wrapped SOAP interface to the WSDbfetch service, for 
'''other interfaces please see the documentation 
'''(http://www.ebi.ac.uk/Tools/webservices/services/dbfetch).  
'''</remarks>
    <System.Web.Services.WebServiceBinding(Name:="WSDbfetchDoclit", Namespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WSDBFetchDoclitServerService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getSupportedDBsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSupportedFormatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSupportedStylesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDatabaseInfoListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDatabaseInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDbFormatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFormatInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getFormatStylesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStyleInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
            Me.Url = "http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit"
        End Sub
        
        Public Sub New(ByVal url As String)
            MyBase.New
            Me.Url = url
        End Sub
        
        Public Event getSupportedDBsCompleted As getSupportedDBsCompletedEventHandler
        
        Public Event getSupportedFormatsCompleted As getSupportedFormatsCompletedEventHandler
        
        Public Event getSupportedStylesCompleted As getSupportedStylesCompletedEventHandler
        
        Public Event getDatabaseInfoListCompleted As getDatabaseInfoListCompletedEventHandler
        
        Public Event getDatabaseInfoCompleted As getDatabaseInfoCompletedEventHandler
        
        Public Event getDbFormatsCompleted As getDbFormatsCompletedEventHandler
        
        Public Event getFormatInfoCompleted As getFormatInfoCompletedEventHandler
        
        Public Event getFormatStylesCompleted As getFormatStylesCompletedEventHandler
        
        Public Event getStyleInfoCompleted As getStyleInfoCompletedEventHandler
        
        Public Event fetchDataCompleted As fetchDataCompletedEventHandler
        
        Public Event fetchBatchCompleted As fetchBatchCompletedEventHandler
        
        '''<remarks>
'''
'''Get a list of available databases (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getsupporteddbs).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getSupportedDBs() As <System.Xml.Serialization.XmlElementAttribute("getSupportedDBsReturn")> String()
            Dim results As Object() = Me.Invoke("getSupportedDBs", New Object((0) - 1) {})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetSupportedDBs(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSupportedDBs", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetSupportedDBs(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getSupportedDBsAsync()
            Me.getSupportedDBsAsync(Nothing)
        End Sub
        
        Public Overloads Sub getSupportedDBsAsync(ByVal userState As Object)
            If (Me.getSupportedDBsOperationCompleted Is Nothing) Then
                Me.getSupportedDBsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetSupportedDBsCompleted)
            End If
            Me.InvokeAsync("getSupportedDBs", New Object((0) - 1) {}, Me.getSupportedDBsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSupportedDBsCompleted(ByVal arg As Object)
            If (Not (Me.getSupportedDBsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSupportedDBsCompleted(Me, New getSupportedDBsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get a list of databases and formats (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getsupportedformats).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getSupportedFormats() As <System.Xml.Serialization.XmlElementAttribute("getSupportedFormatsReturn")> String()
            Dim results As Object() = Me.Invoke("getSupportedFormats", New Object((0) - 1) {})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetSupportedFormats(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSupportedFormats", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetSupportedFormats(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getSupportedFormatsAsync()
            Me.getSupportedFormatsAsync(Nothing)
        End Sub
        
        Public Overloads Sub getSupportedFormatsAsync(ByVal userState As Object)
            If (Me.getSupportedFormatsOperationCompleted Is Nothing) Then
                Me.getSupportedFormatsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetSupportedFormatsCompleted)
            End If
            Me.InvokeAsync("getSupportedFormats", New Object((0) - 1) {}, Me.getSupportedFormatsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSupportedFormatsCompleted(ByVal arg As Object)
            If (Not (Me.getSupportedFormatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSupportedFormatsCompleted(Me, New getSupportedFormatsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Deprecated: use getFormatStyles() or getDatabaseInfo(). Get a list of databases, formats and styles (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getsupportedstyles).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getSupportedStyles() As <System.Xml.Serialization.XmlElementAttribute("getSupportedStylesReturn")> String()
            Dim results As Object() = Me.Invoke("getSupportedStyles", New Object((0) - 1) {})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetSupportedStyles(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSupportedStyles", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetSupportedStyles(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getSupportedStylesAsync()
            Me.getSupportedStylesAsync(Nothing)
        End Sub
        
        Public Overloads Sub getSupportedStylesAsync(ByVal userState As Object)
            If (Me.getSupportedStylesOperationCompleted Is Nothing) Then
                Me.getSupportedStylesOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetSupportedStylesCompleted)
            End If
            Me.InvokeAsync("getSupportedStyles", New Object((0) - 1) {}, Me.getSupportedStylesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSupportedStylesCompleted(ByVal arg As Object)
            If (Not (Me.getSupportedStylesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSupportedStylesCompleted(Me, New getSupportedStylesCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get detailed information about the available databases (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getdatabaseinfolist).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDatabaseInfoList() As <System.Xml.Serialization.XmlElementAttribute("getDatabaseInfoListReturn")> DatabaseInfo()
            Dim results As Object() = Me.Invoke("getDatabaseInfoList", New Object((0) - 1) {})
            Return CType(results(0), DatabaseInfo())
        End Function
        
        Public Function BegingetDatabaseInfoList(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDatabaseInfoList", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetDatabaseInfoList(ByVal asyncResult As System.IAsyncResult) As DatabaseInfo()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), DatabaseInfo())
        End Function
        
        Public Overloads Sub getDatabaseInfoListAsync()
            Me.getDatabaseInfoListAsync(Nothing)
        End Sub
        
        Public Overloads Sub getDatabaseInfoListAsync(ByVal userState As Object)
            If (Me.getDatabaseInfoListOperationCompleted Is Nothing) Then
                Me.getDatabaseInfoListOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDatabaseInfoListCompleted)
            End If
            Me.InvokeAsync("getDatabaseInfoList", New Object((0) - 1) {}, Me.getDatabaseInfoListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDatabaseInfoListCompleted(ByVal arg As Object)
            If (Not (Me.getDatabaseInfoListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDatabaseInfoListCompleted(Me, New getDatabaseInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get detailed information about a database (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getdatabaseinfo_db).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDatabaseInfo(ByVal db As String) As <System.Xml.Serialization.XmlElementAttribute("getDatabaseInfoReturn")> DatabaseInfo
            Dim results As Object() = Me.Invoke("getDatabaseInfo", New Object() {db})
            Return CType(results(0), DatabaseInfo)
        End Function
        
        Public Function BegingetDatabaseInfo(ByVal db As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDatabaseInfo", New Object() {db}, callback, asyncState)
        End Function
        
        Public Function EndgetDatabaseInfo(ByVal asyncResult As System.IAsyncResult) As DatabaseInfo
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), DatabaseInfo)
        End Function
        
        Public Overloads Sub getDatabaseInfoAsync(ByVal db As String)
            Me.getDatabaseInfoAsync(db, Nothing)
        End Sub
        
        Public Overloads Sub getDatabaseInfoAsync(ByVal db As String, ByVal userState As Object)
            If (Me.getDatabaseInfoOperationCompleted Is Nothing) Then
                Me.getDatabaseInfoOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDatabaseInfoCompleted)
            End If
            Me.InvokeAsync("getDatabaseInfo", New Object() {db}, Me.getDatabaseInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDatabaseInfoCompleted(ByVal arg As Object)
            If (Not (Me.getDatabaseInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDatabaseInfoCompleted(Me, New getDatabaseInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get a list of formats for a given database (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getdbformats_db).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDbFormats(ByVal db As String) As <System.Xml.Serialization.XmlElementAttribute("getDbFormatsReturn")> String()
            Dim results As Object() = Me.Invoke("getDbFormats", New Object() {db})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetDbFormats(ByVal db As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDbFormats", New Object() {db}, callback, asyncState)
        End Function
        
        Public Function EndgetDbFormats(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getDbFormatsAsync(ByVal db As String)
            Me.getDbFormatsAsync(db, Nothing)
        End Sub
        
        Public Overloads Sub getDbFormatsAsync(ByVal db As String, ByVal userState As Object)
            If (Me.getDbFormatsOperationCompleted Is Nothing) Then
                Me.getDbFormatsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDbFormatsCompleted)
            End If
            Me.InvokeAsync("getDbFormats", New Object() {db}, Me.getDbFormatsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDbFormatsCompleted(ByVal arg As Object)
            If (Not (Me.getDbFormatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDbFormatsCompleted(Me, New getDbFormatsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get detailed information about a format of a database (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getformatinfo_db_format).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getFormatInfo(ByVal db As String, ByVal format As String) As <System.Xml.Serialization.XmlElementAttribute("getFormatInfoReturn")> FormatInfo
            Dim results As Object() = Me.Invoke("getFormatInfo", New Object() {db, format})
            Return CType(results(0), FormatInfo)
        End Function
        
        Public Function BegingetFormatInfo(ByVal db As String, ByVal format As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getFormatInfo", New Object() {db, format}, callback, asyncState)
        End Function
        
        Public Function EndgetFormatInfo(ByVal asyncResult As System.IAsyncResult) As FormatInfo
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), FormatInfo)
        End Function
        
        Public Overloads Sub getFormatInfoAsync(ByVal db As String, ByVal format As String)
            Me.getFormatInfoAsync(db, format, Nothing)
        End Sub
        
        Public Overloads Sub getFormatInfoAsync(ByVal db As String, ByVal format As String, ByVal userState As Object)
            If (Me.getFormatInfoOperationCompleted Is Nothing) Then
                Me.getFormatInfoOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetFormatInfoCompleted)
            End If
            Me.InvokeAsync("getFormatInfo", New Object() {db, format}, Me.getFormatInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFormatInfoCompleted(ByVal arg As Object)
            If (Not (Me.getFormatInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFormatInfoCompleted(Me, New getFormatInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get a list of available styles for a given database and format (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getformatstyles_db_format).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getFormatStyles(ByVal db As String, ByVal format As String) As <System.Xml.Serialization.XmlElementAttribute("getFormatStylesReturn")> String()
            Dim results As Object() = Me.Invoke("getFormatStyles", New Object() {db, format})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetFormatStyles(ByVal db As String, ByVal format As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getFormatStyles", New Object() {db, format}, callback, asyncState)
        End Function
        
        Public Function EndgetFormatStyles(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getFormatStylesAsync(ByVal db As String, ByVal format As String)
            Me.getFormatStylesAsync(db, format, Nothing)
        End Sub
        
        Public Overloads Sub getFormatStylesAsync(ByVal db As String, ByVal format As String, ByVal userState As Object)
            If (Me.getFormatStylesOperationCompleted Is Nothing) Then
                Me.getFormatStylesOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetFormatStylesCompleted)
            End If
            Me.InvokeAsync("getFormatStyles", New Object() {db, format}, Me.getFormatStylesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetFormatStylesCompleted(ByVal arg As Object)
            If (Not (Me.getFormatStylesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getFormatStylesCompleted(Me, New getFormatStylesCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get detailed information about a style of a format of a database (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#getstyleinfo_db_format_style).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getStyleInfo(ByVal db As String, ByVal format As String, ByVal style As String) As <System.Xml.Serialization.XmlElementAttribute("getStyleInfoReturn")> StyleInfo
            Dim results As Object() = Me.Invoke("getStyleInfo", New Object() {db, format, style})
            Return CType(results(0), StyleInfo)
        End Function
        
        Public Function BegingetStyleInfo(ByVal db As String, ByVal format As String, ByVal style As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getStyleInfo", New Object() {db, format, style}, callback, asyncState)
        End Function
        
        Public Function EndgetStyleInfo(ByVal asyncResult As System.IAsyncResult) As StyleInfo
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), StyleInfo)
        End Function
        
        Public Overloads Sub getStyleInfoAsync(ByVal db As String, ByVal format As String, ByVal style As String)
            Me.getStyleInfoAsync(db, format, style, Nothing)
        End Sub
        
        Public Overloads Sub getStyleInfoAsync(ByVal db As String, ByVal format As String, ByVal style As String, ByVal userState As Object)
            If (Me.getStyleInfoOperationCompleted Is Nothing) Then
                Me.getStyleInfoOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetStyleInfoCompleted)
            End If
            Me.InvokeAsync("getStyleInfo", New Object() {db, format, style}, Me.getStyleInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStyleInfoCompleted(ByVal arg As Object)
            If (Not (Me.getStyleInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStyleInfoCompleted(Me, New getStyleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get a database entry (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#fetchdata_query_format_style).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function fetchData(ByVal query As String, ByVal format As String, ByVal style As String) As <System.Xml.Serialization.XmlElementAttribute("fetchDataReturn")> String
            Dim results As Object() = Me.Invoke("fetchData", New Object() {query, format, style})
            Return CType(results(0), String)
        End Function
        
        Public Function BeginfetchData(ByVal query As String, ByVal format As String, ByVal style As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("fetchData", New Object() {query, format, style}, callback, asyncState)
        End Function
        
        Public Function EndfetchData(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub fetchDataAsync(ByVal query As String, ByVal format As String, ByVal style As String)
            Me.fetchDataAsync(query, format, style, Nothing)
        End Sub
        
        Public Overloads Sub fetchDataAsync(ByVal query As String, ByVal format As String, ByVal style As String, ByVal userState As Object)
            If (Me.fetchDataOperationCompleted Is Nothing) Then
                Me.fetchDataOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnfetchDataCompleted)
            End If
            Me.InvokeAsync("fetchData", New Object() {query, format, style}, Me.fetchDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchDataCompleted(ByVal arg As Object)
            If (Not (Me.fetchDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchDataCompleted(Me, New fetchDataCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''
'''Get a set of database entries (see http://www.ebi.ac.uk/Tools/webservices/services/dbfetch#fetchbatch_db_ids_format_style).   
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ResponseNamespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function fetchBatch(ByVal db As String, ByVal ids As String, ByVal format As String, ByVal style As String) As <System.Xml.Serialization.XmlElementAttribute("fetchBatchReturn")> String
            Dim results As Object() = Me.Invoke("fetchBatch", New Object() {db, ids, format, style})
            Return CType(results(0), String)
        End Function
        
        Public Function BeginfetchBatch(ByVal db As String, ByVal ids As String, ByVal format As String, ByVal style As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("fetchBatch", New Object() {db, ids, format, style}, callback, asyncState)
        End Function
        
        Public Function EndfetchBatch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub fetchBatchAsync(ByVal db As String, ByVal ids As String, ByVal format As String, ByVal style As String)
            Me.fetchBatchAsync(db, ids, format, style, Nothing)
        End Sub
        
        Public Overloads Sub fetchBatchAsync(ByVal db As String, ByVal ids As String, ByVal format As String, ByVal style As String, ByVal userState As Object)
            If (Me.fetchBatchOperationCompleted Is Nothing) Then
                Me.fetchBatchOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnfetchBatchCompleted)
            End If
            Me.InvokeAsync("fetchBatch", New Object() {db, ids, format, style}, Me.fetchBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchBatchCompleted(ByVal arg As Object)
            If (Not (Me.fetchBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchBatchCompleted(Me, New fetchBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit")>  _
    Partial Public Class DatabaseInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="alias", IsNullable:=false)>  _
        Public aliasList As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="databaseTerm", IsNullable:=false)>  _
        Public databaseTerms As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public defaultFormat As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public description As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public displayName As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public exampleIdentifiers As ExampleIdentifiersInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="formatInfo", IsNullable:=false)>  _
        Public formatInfoList As FormatInfo()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public href As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public name As String
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit")>  _
    Partial Public Class ExampleIdentifiersInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="accession", IsNullable:=false)>  _
        Public accessionList As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="entryVersion", IsNullable:=false)>  _
        Public entryVersionList As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="id", IsNullable:=false)>  _
        Public idList As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="name", IsNullable:=false)>  _
        Public nameList As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="sequenceVersion", IsNullable:=false)>  _
        Public sequenceVersionList As String()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit")>  _
    Partial Public Class FormatInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="alias", IsNullable:=false)>  _
        Public aliases As String()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="dataTerm", IsNullable:=false)>  _
        Public dataTerms As String()
        
        '''<remarks/>
        Public name As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="styleInfo", IsNullable:=false)>  _
        Public styleInfoList As StyleInfo()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="syntaxTerm", IsNullable:=false)>  _
        Public syntaxTerms As String()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/ws/services/WSDbfetchDoclit")>  _
    Partial Public Class StyleInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public mimeType As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public name As String
    End Class
    
    Partial Public Class getSupportedDBsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getSupportedDBsCompletedEventHandler(ByVal sender As Object, ByVal args As getSupportedDBsCompletedEventArgs)
    
    Partial Public Class getSupportedFormatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getSupportedFormatsCompletedEventHandler(ByVal sender As Object, ByVal args As getSupportedFormatsCompletedEventArgs)
    
    Partial Public Class getSupportedStylesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getSupportedStylesCompletedEventHandler(ByVal sender As Object, ByVal args As getSupportedStylesCompletedEventArgs)
    
    Partial Public Class getDatabaseInfoListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As DatabaseInfo()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), DatabaseInfo())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDatabaseInfoListCompletedEventHandler(ByVal sender As Object, ByVal args As getDatabaseInfoListCompletedEventArgs)
    
    Partial Public Class getDatabaseInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As DatabaseInfo
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), DatabaseInfo)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDatabaseInfoCompletedEventHandler(ByVal sender As Object, ByVal args As getDatabaseInfoCompletedEventArgs)
    
    Partial Public Class getDbFormatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDbFormatsCompletedEventHandler(ByVal sender As Object, ByVal args As getDbFormatsCompletedEventArgs)
    
    Partial Public Class getFormatInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As FormatInfo
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), FormatInfo)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getFormatInfoCompletedEventHandler(ByVal sender As Object, ByVal args As getFormatInfoCompletedEventArgs)
    
    Partial Public Class getFormatStylesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getFormatStylesCompletedEventHandler(ByVal sender As Object, ByVal args As getFormatStylesCompletedEventArgs)
    
    Partial Public Class getStyleInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As StyleInfo
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), StyleInfo)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getStyleInfoCompletedEventHandler(ByVal sender As Object, ByVal args As getStyleInfoCompletedEventArgs)
    
    Partial Public Class fetchDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub fetchDataCompletedEventHandler(ByVal sender As Object, ByVal args As fetchDataCompletedEventArgs)
    
    Partial Public Class fetchBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub fetchBatchCompletedEventHandler(ByVal sender As Object, ByVal args As fetchBatchCompletedEventArgs)
End Namespace
