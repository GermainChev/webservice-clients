'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Mono Runtime Version: 2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Explicit On
Option Strict On


Namespace EbiWs.EBeyeWs
    
    '''<remarks/>
    <System.Web.Services.WebServiceBinding(Name:="EBISearchServiceHttpPort", Namespace:="http://www.ebi.ac.uk/EBISearchService"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(anyType2anyTypeMapEntry))>  _
    Partial Public Class EBISearchService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getDomainsReferencedInDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntryFieldUrlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private listFieldsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDetailledNumberOfResultsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private listFieldsInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNumberOfResultsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getReferencedEntriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private listAdditionalReferenceFieldsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getEntriesFieldUrlsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDomainsReferencedInEntryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getReferencedEntriesFlatSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getResultsIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getReferencedEntriesSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private listDomainsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDomainsHierarchyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllResultsIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getResultsOperationCompleted As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
            Me.Url = "http://www.ebi.ac.uk/ebisearch/service.ebi/"
        End Sub
        
        Public Sub New(ByVal url As String)
            MyBase.New
            Me.Url = url
        End Sub
        
        Public Event getDomainsReferencedInDomainCompleted As getDomainsReferencedInDomainCompletedEventHandler
        
        Public Event getEntriesCompleted As getEntriesCompletedEventHandler
        
        Public Event getEntryFieldUrlsCompleted As getEntryFieldUrlsCompletedEventHandler
        
        Public Event listFieldsCompleted As listFieldsCompletedEventHandler
        
        Public Event getDetailledNumberOfResultsCompleted As getDetailledNumberOfResultsCompletedEventHandler
        
        Public Event listFieldsInformationCompleted As listFieldsInformationCompletedEventHandler
        
        Public Event getEntryCompleted As getEntryCompletedEventHandler
        
        Public Event getNumberOfResultsCompleted As getNumberOfResultsCompletedEventHandler
        
        Public Event getReferencedEntriesCompleted As getReferencedEntriesCompletedEventHandler
        
        Public Event listAdditionalReferenceFieldsCompleted As listAdditionalReferenceFieldsCompletedEventHandler
        
        Public Event getEntriesFieldUrlsCompleted As getEntriesFieldUrlsCompletedEventHandler
        
        Public Event getDomainsReferencedInEntryCompleted As getDomainsReferencedInEntryCompletedEventHandler
        
        Public Event getReferencedEntriesFlatSetCompleted As getReferencedEntriesFlatSetCompletedEventHandler
        
        Public Event getResultsIdsCompleted As getResultsIdsCompletedEventHandler
        
        Public Event getReferencedEntriesSetCompleted As getReferencedEntriesSetCompletedEventHandler
        
        Public Event listDomainsCompleted As listDomainsCompletedEventHandler
        
        Public Event getDomainsHierarchyCompleted As getDomainsHierarchyCompletedEventHandler
        
        Public Event getAllResultsIdsCompleted As getAllResultsIdsCompletedEventHandler
        
        Public Event getResultsCompleted As getResultsCompletedEventHandler
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetDomainsReferencedInDomain", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDomainsReferencedInDomain(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfDomainNames", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getDomainsReferencedInDomain", New Object() {domain})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetDomainsReferencedInDomain(ByVal domain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDomainsReferencedInDomain", New Object() {domain}, callback, asyncState)
        End Function
        
        Public Function EndgetDomainsReferencedInDomain(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getDomainsReferencedInDomainAsync(ByVal domain As String)
            Me.getDomainsReferencedInDomainAsync(domain, Nothing)
        End Sub
        
        Public Overloads Sub getDomainsReferencedInDomainAsync(ByVal domain As String, ByVal userState As Object)
            If (Me.getDomainsReferencedInDomainOperationCompleted Is Nothing) Then
                Me.getDomainsReferencedInDomainOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDomainsReferencedInDomainCompleted)
            End If
            Me.InvokeAsync("getDomainsReferencedInDomain", New Object() {domain}, Me.getDomainsReferencedInDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDomainsReferencedInDomainCompleted(ByVal arg As Object)
            If (Not (Me.getDomainsReferencedInDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDomainsReferencedInDomainCompleted(Me, New getDomainsReferencedInDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetEntries", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getEntries(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal entries As String(), <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryValues", IsNullable:=true)> String
            Dim results As Object() = Me.Invoke("getEntries", New Object() {domain, entries, fields})
            Return CType(results(0), String)
        End Function
        
        Public Function BegingetEntries(ByVal domain As String, ByVal entries As String(), ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getEntries", New Object() {domain, entries, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetEntries(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub getEntriesAsync(ByVal domain As String, ByVal entries As String(), ByVal fields As String())
            Me.getEntriesAsync(domain, entries, fields, Nothing)
        End Sub
        
        Public Overloads Sub getEntriesAsync(ByVal domain As String, ByVal entries As String(), ByVal fields As String(), ByVal userState As Object)
            If (Me.getEntriesOperationCompleted Is Nothing) Then
                Me.getEntriesOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetEntriesCompleted)
            End If
            Me.InvokeAsync("getEntries", New Object() {domain, entries, fields}, Me.getEntriesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntriesCompleted(ByVal arg As Object)
            If (Not (Me.getEntriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntriesCompleted(Me, New getEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetEntryFieldUrls", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getEntryFieldUrls(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal entry As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="entryUrlsValues", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getEntryFieldUrls", New Object() {domain, entry, fields})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetEntryFieldUrls(ByVal domain As String, ByVal entry As String, ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getEntryFieldUrls", New Object() {domain, entry, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetEntryFieldUrls(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getEntryFieldUrlsAsync(ByVal domain As String, ByVal entry As String, ByVal fields As String())
            Me.getEntryFieldUrlsAsync(domain, entry, fields, Nothing)
        End Sub
        
        Public Overloads Sub getEntryFieldUrlsAsync(ByVal domain As String, ByVal entry As String, ByVal fields As String(), ByVal userState As Object)
            If (Me.getEntryFieldUrlsOperationCompleted Is Nothing) Then
                Me.getEntryFieldUrlsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetEntryFieldUrlsCompleted)
            End If
            Me.InvokeAsync("getEntryFieldUrls", New Object() {domain, entry, fields}, Me.getEntryFieldUrlsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntryFieldUrlsCompleted(ByVal arg As Object)
            If (Not (Me.getEntryFieldUrlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntryFieldUrlsCompleted(Me, New getEntryFieldUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ListFields", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function listFields(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfFieldNames", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("listFields", New Object() {domain})
            Return CType(results(0), String())
        End Function
        
        Public Function BeginlistFields(ByVal domain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("listFields", New Object() {domain}, callback, asyncState)
        End Function
        
        Public Function EndlistFields(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub listFieldsAsync(ByVal domain As String)
            Me.listFieldsAsync(domain, Nothing)
        End Sub
        
        Public Overloads Sub listFieldsAsync(ByVal domain As String, ByVal userState As Object)
            If (Me.listFieldsOperationCompleted Is Nothing) Then
                Me.listFieldsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnlistFieldsCompleted)
            End If
            Me.InvokeAsync("listFields", New Object() {domain}, Me.listFieldsOperationCompleted, userState)
        End Sub
        
        Private Sub OnlistFieldsCompleted(ByVal arg As Object)
            If (Not (Me.listFieldsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent listFieldsCompleted(Me, New listFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetDetailledNumberOfResults", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDetailledNumberOfResults(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal query As String, ByVal flat As Boolean) As <System.Xml.Serialization.XmlElementAttribute("detailledNumberOfResults", IsNullable:=true)> DomainResult
            Dim results As Object() = Me.Invoke("getDetailledNumberOfResults", New Object() {domain, query, flat})
            Return CType(results(0), DomainResult)
        End Function
        
        Public Function BegingetDetailledNumberOfResults(ByVal domain As String, ByVal query As String, ByVal flat As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDetailledNumberOfResults", New Object() {domain, query, flat}, callback, asyncState)
        End Function
        
        Public Function EndgetDetailledNumberOfResults(ByVal asyncResult As System.IAsyncResult) As DomainResult
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), DomainResult)
        End Function
        
        Public Overloads Sub getDetailledNumberOfResultsAsync(ByVal domain As String, ByVal query As String, ByVal flat As Boolean)
            Me.getDetailledNumberOfResultsAsync(domain, query, flat, Nothing)
        End Sub
        
        Public Overloads Sub getDetailledNumberOfResultsAsync(ByVal domain As String, ByVal query As String, ByVal flat As Boolean, ByVal userState As Object)
            If (Me.getDetailledNumberOfResultsOperationCompleted Is Nothing) Then
                Me.getDetailledNumberOfResultsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDetailledNumberOfResultsCompleted)
            End If
            Me.InvokeAsync("getDetailledNumberOfResults", New Object() {domain, query, flat}, Me.getDetailledNumberOfResultsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDetailledNumberOfResultsCompleted(ByVal arg As Object)
            If (Not (Me.getDetailledNumberOfResultsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDetailledNumberOfResultsCompleted(Me, New getDetailledNumberOfResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ListFieldsInformation", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function listFieldsInformation(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfFieldInformation", IsNullable:=true), System.Xml.Serialization.XmlArrayItem(Namespace:="http://webservice.ebinocle.ebi.ac.uk")> FieldInfo()
            Dim results As Object() = Me.Invoke("listFieldsInformation", New Object() {domain})
            Return CType(results(0), FieldInfo())
        End Function
        
        Public Function BeginlistFieldsInformation(ByVal domain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("listFieldsInformation", New Object() {domain}, callback, asyncState)
        End Function
        
        Public Function EndlistFieldsInformation(ByVal asyncResult As System.IAsyncResult) As FieldInfo()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), FieldInfo())
        End Function
        
        Public Overloads Sub listFieldsInformationAsync(ByVal domain As String)
            Me.listFieldsInformationAsync(domain, Nothing)
        End Sub
        
        Public Overloads Sub listFieldsInformationAsync(ByVal domain As String, ByVal userState As Object)
            If (Me.listFieldsInformationOperationCompleted Is Nothing) Then
                Me.listFieldsInformationOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnlistFieldsInformationCompleted)
            End If
            Me.InvokeAsync("listFieldsInformation", New Object() {domain}, Me.listFieldsInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnlistFieldsInformationCompleted(ByVal arg As Object)
            If (Not (Me.listFieldsInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent listFieldsInformationCompleted(Me, New listFieldsInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetEntry", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getEntry(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal entry As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="entryValues", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getEntry", New Object() {domain, entry, fields})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetEntry(ByVal domain As String, ByVal entry As String, ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getEntry", New Object() {domain, entry, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetEntry(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getEntryAsync(ByVal domain As String, ByVal entry As String, ByVal fields As String())
            Me.getEntryAsync(domain, entry, fields, Nothing)
        End Sub
        
        Public Overloads Sub getEntryAsync(ByVal domain As String, ByVal entry As String, ByVal fields As String(), ByVal userState As Object)
            If (Me.getEntryOperationCompleted Is Nothing) Then
                Me.getEntryOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetEntryCompleted)
            End If
            Me.InvokeAsync("getEntry", New Object() {domain, entry, fields}, Me.getEntryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntryCompleted(ByVal arg As Object)
            If (Not (Me.getEntryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntryCompleted(Me, New getEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetNumberOfResults", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getNumberOfResults(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal query As String) As <System.Xml.Serialization.XmlElementAttribute("numberOfResults")> Integer
            Dim results As Object() = Me.Invoke("getNumberOfResults", New Object() {domain, query})
            Return CType(results(0), Integer)
        End Function
        
        Public Function BegingetNumberOfResults(ByVal domain As String, ByVal query As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getNumberOfResults", New Object() {domain, query}, callback, asyncState)
        End Function
        
        Public Function EndgetNumberOfResults(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), Integer)
        End Function
        
        Public Overloads Sub getNumberOfResultsAsync(ByVal domain As String, ByVal query As String)
            Me.getNumberOfResultsAsync(domain, query, Nothing)
        End Sub
        
        Public Overloads Sub getNumberOfResultsAsync(ByVal domain As String, ByVal query As String, ByVal userState As Object)
            If (Me.getNumberOfResultsOperationCompleted Is Nothing) Then
                Me.getNumberOfResultsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetNumberOfResultsCompleted)
            End If
            Me.InvokeAsync("getNumberOfResults", New Object() {domain, query}, Me.getNumberOfResultsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNumberOfResultsCompleted(ByVal arg As Object)
            If (Not (Me.getNumberOfResultsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNumberOfResultsCompleted(Me, New getNumberOfResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetReferencedEntries", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getReferencedEntries(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal entry As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal referencedDomain As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryIds", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getReferencedEntries", New Object() {domain, entry, referencedDomain})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetReferencedEntries(ByVal domain As String, ByVal entry As String, ByVal referencedDomain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getReferencedEntries", New Object() {domain, entry, referencedDomain}, callback, asyncState)
        End Function
        
        Public Function EndgetReferencedEntries(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getReferencedEntriesAsync(ByVal domain As String, ByVal entry As String, ByVal referencedDomain As String)
            Me.getReferencedEntriesAsync(domain, entry, referencedDomain, Nothing)
        End Sub
        
        Public Overloads Sub getReferencedEntriesAsync(ByVal domain As String, ByVal entry As String, ByVal referencedDomain As String, ByVal userState As Object)
            If (Me.getReferencedEntriesOperationCompleted Is Nothing) Then
                Me.getReferencedEntriesOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetReferencedEntriesCompleted)
            End If
            Me.InvokeAsync("getReferencedEntries", New Object() {domain, entry, referencedDomain}, Me.getReferencedEntriesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetReferencedEntriesCompleted(ByVal arg As Object)
            If (Not (Me.getReferencedEntriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getReferencedEntriesCompleted(Me, New getReferencedEntriesCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ListAdditionalReferenceFields", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function listAdditionalReferenceFields(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfFieldNames", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("listAdditionalReferenceFields", New Object() {domain})
            Return CType(results(0), String())
        End Function
        
        Public Function BeginlistAdditionalReferenceFields(ByVal domain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("listAdditionalReferenceFields", New Object() {domain}, callback, asyncState)
        End Function
        
        Public Function EndlistAdditionalReferenceFields(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub listAdditionalReferenceFieldsAsync(ByVal domain As String)
            Me.listAdditionalReferenceFieldsAsync(domain, Nothing)
        End Sub
        
        Public Overloads Sub listAdditionalReferenceFieldsAsync(ByVal domain As String, ByVal userState As Object)
            If (Me.listAdditionalReferenceFieldsOperationCompleted Is Nothing) Then
                Me.listAdditionalReferenceFieldsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnlistAdditionalReferenceFieldsCompleted)
            End If
            Me.InvokeAsync("listAdditionalReferenceFields", New Object() {domain}, Me.listAdditionalReferenceFieldsOperationCompleted, userState)
        End Sub
        
        Private Sub OnlistAdditionalReferenceFieldsCompleted(ByVal arg As Object)
            If (Not (Me.listAdditionalReferenceFieldsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent listAdditionalReferenceFieldsCompleted(Me, New listAdditionalReferenceFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetEntriesFieldUrls", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getEntriesFieldUrls(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal entries As String(), <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryUrlsValues", IsNullable:=true)> String
            Dim results As Object() = Me.Invoke("getEntriesFieldUrls", New Object() {domain, entries, fields})
            Return CType(results(0), String)
        End Function
        
        Public Function BegingetEntriesFieldUrls(ByVal domain As String, ByVal entries As String(), ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getEntriesFieldUrls", New Object() {domain, entries, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetEntriesFieldUrls(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub getEntriesFieldUrlsAsync(ByVal domain As String, ByVal entries As String(), ByVal fields As String())
            Me.getEntriesFieldUrlsAsync(domain, entries, fields, Nothing)
        End Sub
        
        Public Overloads Sub getEntriesFieldUrlsAsync(ByVal domain As String, ByVal entries As String(), ByVal fields As String(), ByVal userState As Object)
            If (Me.getEntriesFieldUrlsOperationCompleted Is Nothing) Then
                Me.getEntriesFieldUrlsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetEntriesFieldUrlsCompleted)
            End If
            Me.InvokeAsync("getEntriesFieldUrls", New Object() {domain, entries, fields}, Me.getEntriesFieldUrlsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetEntriesFieldUrlsCompleted(ByVal arg As Object)
            If (Not (Me.getEntriesFieldUrlsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getEntriesFieldUrlsCompleted(Me, New getEntriesFieldUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetDomainsReferencedInEntry", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDomainsReferencedInEntry(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal entry As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfDomainNames", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getDomainsReferencedInEntry", New Object() {domain, entry})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetDomainsReferencedInEntry(ByVal domain As String, ByVal entry As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDomainsReferencedInEntry", New Object() {domain, entry}, callback, asyncState)
        End Function
        
        Public Function EndgetDomainsReferencedInEntry(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getDomainsReferencedInEntryAsync(ByVal domain As String, ByVal entry As String)
            Me.getDomainsReferencedInEntryAsync(domain, entry, Nothing)
        End Sub
        
        Public Overloads Sub getDomainsReferencedInEntryAsync(ByVal domain As String, ByVal entry As String, ByVal userState As Object)
            If (Me.getDomainsReferencedInEntryOperationCompleted Is Nothing) Then
                Me.getDomainsReferencedInEntryOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDomainsReferencedInEntryCompleted)
            End If
            Me.InvokeAsync("getDomainsReferencedInEntry", New Object() {domain, entry}, Me.getDomainsReferencedInEntryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDomainsReferencedInEntryCompleted(ByVal arg As Object)
            If (Not (Me.getDomainsReferencedInEntryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDomainsReferencedInEntryCompleted(Me, New getDomainsReferencedInEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetReferencedEntriesFlatSet", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getReferencedEntriesFlatSet(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal entries As String(), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal referencedDomain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryValues", IsNullable:=true)> String
            Dim results As Object() = Me.Invoke("getReferencedEntriesFlatSet", New Object() {domain, entries, referencedDomain, fields})
            Return CType(results(0), String)
        End Function
        
        Public Function BegingetReferencedEntriesFlatSet(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getReferencedEntriesFlatSet", New Object() {domain, entries, referencedDomain, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetReferencedEntriesFlatSet(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub getReferencedEntriesFlatSetAsync(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String())
            Me.getReferencedEntriesFlatSetAsync(domain, entries, referencedDomain, fields, Nothing)
        End Sub
        
        Public Overloads Sub getReferencedEntriesFlatSetAsync(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String(), ByVal userState As Object)
            If (Me.getReferencedEntriesFlatSetOperationCompleted Is Nothing) Then
                Me.getReferencedEntriesFlatSetOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetReferencedEntriesFlatSetCompleted)
            End If
            Me.InvokeAsync("getReferencedEntriesFlatSet", New Object() {domain, entries, referencedDomain, fields}, Me.getReferencedEntriesFlatSetOperationCompleted, userState)
        End Sub
        
        Private Sub OngetReferencedEntriesFlatSetCompleted(ByVal arg As Object)
            If (Not (Me.getReferencedEntriesFlatSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getReferencedEntriesFlatSetCompleted(Me, New getReferencedEntriesFlatSetCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResultsIds", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getResultsIds(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal query As String, ByVal start As Integer, ByVal size As Integer) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfIds", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getResultsIds", New Object() {domain, query, start, size})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetResultsIds(ByVal domain As String, ByVal query As String, ByVal start As Integer, ByVal size As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getResultsIds", New Object() {domain, query, start, size}, callback, asyncState)
        End Function
        
        Public Function EndgetResultsIds(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getResultsIdsAsync(ByVal domain As String, ByVal query As String, ByVal start As Integer, ByVal size As Integer)
            Me.getResultsIdsAsync(domain, query, start, size, Nothing)
        End Sub
        
        Public Overloads Sub getResultsIdsAsync(ByVal domain As String, ByVal query As String, ByVal start As Integer, ByVal size As Integer, ByVal userState As Object)
            If (Me.getResultsIdsOperationCompleted Is Nothing) Then
                Me.getResultsIdsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetResultsIdsCompleted)
            End If
            Me.InvokeAsync("getResultsIds", New Object() {domain, query, start, size}, Me.getResultsIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetResultsIdsCompleted(ByVal arg As Object)
            If (Not (Me.getResultsIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getResultsIdsCompleted(Me, New getResultsIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetReferencedEntriesSet", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getReferencedEntriesSet(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal entries As String(), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal referencedDomain As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String()) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryValues", IsNullable:=true), System.Xml.Serialization.XmlArrayItem(Namespace:="http://webservice.ebinocle.ebi.ac.uk")> EntryReferences()
            Dim results As Object() = Me.Invoke("getReferencedEntriesSet", New Object() {domain, entries, referencedDomain, fields})
            Return CType(results(0), EntryReferences())
        End Function
        
        Public Function BegingetReferencedEntriesSet(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getReferencedEntriesSet", New Object() {domain, entries, referencedDomain, fields}, callback, asyncState)
        End Function
        
        Public Function EndgetReferencedEntriesSet(ByVal asyncResult As System.IAsyncResult) As EntryReferences()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), EntryReferences())
        End Function
        
        Public Overloads Sub getReferencedEntriesSetAsync(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String())
            Me.getReferencedEntriesSetAsync(domain, entries, referencedDomain, fields, Nothing)
        End Sub
        
        Public Overloads Sub getReferencedEntriesSetAsync(ByVal domain As String, ByVal entries As String(), ByVal referencedDomain As String, ByVal fields As String(), ByVal userState As Object)
            If (Me.getReferencedEntriesSetOperationCompleted Is Nothing) Then
                Me.getReferencedEntriesSetOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetReferencedEntriesSetCompleted)
            End If
            Me.InvokeAsync("getReferencedEntriesSet", New Object() {domain, entries, referencedDomain, fields}, Me.getReferencedEntriesSetOperationCompleted, userState)
        End Sub
        
        Private Sub OngetReferencedEntriesSetCompleted(ByVal arg As Object)
            If (Not (Me.getReferencedEntriesSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getReferencedEntriesSetCompleted(Me, New getReferencedEntriesSetCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ListDomains", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function listDomains() As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfDomainNames", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("listDomains", New Object((0) - 1) {})
            Return CType(results(0), String())
        End Function
        
        Public Function BeginlistDomains(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("listDomains", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndlistDomains(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub listDomainsAsync()
            Me.listDomainsAsync(Nothing)
        End Sub
        
        Public Overloads Sub listDomainsAsync(ByVal userState As Object)
            If (Me.listDomainsOperationCompleted Is Nothing) Then
                Me.listDomainsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnlistDomainsCompleted)
            End If
            Me.InvokeAsync("listDomains", New Object((0) - 1) {}, Me.listDomainsOperationCompleted, userState)
        End Sub
        
        Private Sub OnlistDomainsCompleted(ByVal arg As Object)
            If (Not (Me.listDomainsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent listDomainsCompleted(Me, New listDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetDomainsHierarchy", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getDomainsHierarchy() As <System.Xml.Serialization.XmlElementAttribute("rootDomain", IsNullable:=true)> DomainDescription
            Dim results As Object() = Me.Invoke("getDomainsHierarchy", New Object((0) - 1) {})
            Return CType(results(0), DomainDescription)
        End Function
        
        Public Function BegingetDomainsHierarchy(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getDomainsHierarchy", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetDomainsHierarchy(ByVal asyncResult As System.IAsyncResult) As DomainDescription
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), DomainDescription)
        End Function
        
        Public Overloads Sub getDomainsHierarchyAsync()
            Me.getDomainsHierarchyAsync(Nothing)
        End Sub
        
        Public Overloads Sub getDomainsHierarchyAsync(ByVal userState As Object)
            If (Me.getDomainsHierarchyOperationCompleted Is Nothing) Then
                Me.getDomainsHierarchyOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetDomainsHierarchyCompleted)
            End If
            Me.InvokeAsync("getDomainsHierarchy", New Object((0) - 1) {}, Me.getDomainsHierarchyOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDomainsHierarchyCompleted(ByVal arg As Object)
            If (Not (Me.getDomainsHierarchyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDomainsHierarchyCompleted(Me, New getDomainsHierarchyCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetAllResultsIds", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getAllResultsIds(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal query As String) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfIds", IsNullable:=true)> String()
            Dim results As Object() = Me.Invoke("getAllResultsIds", New Object() {domain, query})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetAllResultsIds(ByVal domain As String, ByVal query As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAllResultsIds", New Object() {domain, query}, callback, asyncState)
        End Function
        
        Public Function EndgetAllResultsIds(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getAllResultsIdsAsync(ByVal domain As String, ByVal query As String)
            Me.getAllResultsIdsAsync(domain, query, Nothing)
        End Sub
        
        Public Overloads Sub getAllResultsIdsAsync(ByVal domain As String, ByVal query As String, ByVal userState As Object)
            If (Me.getAllResultsIdsOperationCompleted Is Nothing) Then
                Me.getAllResultsIdsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetAllResultsIdsCompleted)
            End If
            Me.InvokeAsync("getAllResultsIds", New Object() {domain, query}, Me.getAllResultsIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllResultsIdsCompleted(ByVal arg As Object)
            If (Not (Me.getAllResultsIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllResultsIdsCompleted(Me, New getAllResultsIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResults", RequestNamespace:="http://www.ebi.ac.uk/EBISearchService", ResponseNamespace:="http://www.ebi.ac.uk/EBISearchService", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getResults(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal domain As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal query As String, <System.Xml.Serialization.XmlArray(IsNullable:=true)> ByVal fields As String(), ByVal start As Integer, ByVal size As Integer) As <System.Xml.Serialization.XmlArray(ElementName:="arrayOfEntryValues", IsNullable:=true)> String
            Dim results As Object() = Me.Invoke("getResults", New Object() {domain, query, fields, start, size})
            Return CType(results(0), String)
        End Function
        
        Public Function BegingetResults(ByVal domain As String, ByVal query As String, ByVal fields As String(), ByVal start As Integer, ByVal size As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getResults", New Object() {domain, query, fields, start, size}, callback, asyncState)
        End Function
        
        Public Function EndgetResults(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub getResultsAsync(ByVal domain As String, ByVal query As String, ByVal fields As String(), ByVal start As Integer, ByVal size As Integer)
            Me.getResultsAsync(domain, query, fields, start, size, Nothing)
        End Sub
        
        Public Overloads Sub getResultsAsync(ByVal domain As String, ByVal query As String, ByVal fields As String(), ByVal start As Integer, ByVal size As Integer, ByVal userState As Object)
            If (Me.getResultsOperationCompleted Is Nothing) Then
                Me.getResultsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetResultsCompleted)
            End If
            Me.InvokeAsync("getResults", New Object() {domain, query, fields, start, size}, Me.getResultsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetResultsCompleted(ByVal arg As Object)
            If (Not (Me.getResultsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getResultsCompleted(Me, New getResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://webservice.ebinocle.ebi.ac.uk")>  _
    Partial Public Class DomainResult
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public domainId As String
        
        '''<remarks/>
        Public numberOfResults As Integer
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnore()>  _
        Public numberOfResultsSpecified As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true)>  _
        Public subDomainsResults As DomainResult()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://webservice.ebinocle.ebi.ac.uk")>  _
    Partial Public Class FieldInfo
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public description As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public id As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public name As String
        
        '''<remarks/>
        Public retrievable As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnore()>  _
        Public retrievableSpecified As Boolean
        
        '''<remarks/>
        Public searchable As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnore()>  _
        Public searchableSpecified As Boolean
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://webservice.ebinocle.ebi.ac.uk")>  _
    Partial Public Class EntryReferences
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public entry As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(Namespace:="http://www.ebi.ac.uk/EBISearchService"),  _
         System.Xml.Serialization.XmlArrayItem(Namespace:="http://www.ebi.ac.uk/EBISearchService", NestingLevel:=1)>  _
        Public references As String()()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://webservice.ebinocle.ebi.ac.uk")>  _
    Partial Public Class DomainDescription
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public description As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public id As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public name As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItem(ElementName:="entry", Namespace:="http://www.ebi.ac.uk/EBISearchService")>  _
        Public properties As anyType2anyType2anyTypeMapMapEntry()
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true)>  _
        Public subDomains As DomainDescription()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/EBISearchService")>  _
    Partial Public Class anyType2anyType2anyTypeMapMapEntry
        
        '''<remarks/>
        Public key As Object
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayItem(ElementName:="entry")>  _
        Public value As anyType2anyTypeMapEntry()
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://www.ebi.ac.uk/EBISearchService")>  _
    Partial Public Class anyType2anyTypeMapEntry
        
        '''<remarks/>
        Public key As Object
        
        '''<remarks/>
        Public value As Object
    End Class
    
    Partial Public Class getDomainsReferencedInDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDomainsReferencedInDomainCompletedEventHandler(ByVal sender As Object, ByVal args As getDomainsReferencedInDomainCompletedEventArgs)
    
    Partial Public Class getEntriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getEntriesCompletedEventHandler(ByVal sender As Object, ByVal args As getEntriesCompletedEventArgs)
    
    Partial Public Class getEntryFieldUrlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getEntryFieldUrlsCompletedEventHandler(ByVal sender As Object, ByVal args As getEntryFieldUrlsCompletedEventArgs)
    
    Partial Public Class listFieldsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub listFieldsCompletedEventHandler(ByVal sender As Object, ByVal args As listFieldsCompletedEventArgs)
    
    Partial Public Class getDetailledNumberOfResultsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As DomainResult
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), DomainResult)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDetailledNumberOfResultsCompletedEventHandler(ByVal sender As Object, ByVal args As getDetailledNumberOfResultsCompletedEventArgs)
    
    Partial Public Class listFieldsInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As FieldInfo()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), FieldInfo())
            End Get
        End Property
    End Class
    
    Public Delegate Sub listFieldsInformationCompletedEventHandler(ByVal sender As Object, ByVal args As listFieldsInformationCompletedEventArgs)
    
    Partial Public Class getEntryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getEntryCompletedEventHandler(ByVal sender As Object, ByVal args As getEntryCompletedEventArgs)
    
    Partial Public Class getNumberOfResultsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getNumberOfResultsCompletedEventHandler(ByVal sender As Object, ByVal args As getNumberOfResultsCompletedEventArgs)
    
    Partial Public Class getReferencedEntriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getReferencedEntriesCompletedEventHandler(ByVal sender As Object, ByVal args As getReferencedEntriesCompletedEventArgs)
    
    Partial Public Class listAdditionalReferenceFieldsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub listAdditionalReferenceFieldsCompletedEventHandler(ByVal sender As Object, ByVal args As listAdditionalReferenceFieldsCompletedEventArgs)
    
    Partial Public Class getEntriesFieldUrlsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getEntriesFieldUrlsCompletedEventHandler(ByVal sender As Object, ByVal args As getEntriesFieldUrlsCompletedEventArgs)
    
    Partial Public Class getDomainsReferencedInEntryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDomainsReferencedInEntryCompletedEventHandler(ByVal sender As Object, ByVal args As getDomainsReferencedInEntryCompletedEventArgs)
    
    Partial Public Class getReferencedEntriesFlatSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getReferencedEntriesFlatSetCompletedEventHandler(ByVal sender As Object, ByVal args As getReferencedEntriesFlatSetCompletedEventArgs)
    
    Partial Public Class getResultsIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getResultsIdsCompletedEventHandler(ByVal sender As Object, ByVal args As getResultsIdsCompletedEventArgs)
    
    Partial Public Class getReferencedEntriesSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As EntryReferences()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), EntryReferences())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getReferencedEntriesSetCompletedEventHandler(ByVal sender As Object, ByVal args As getReferencedEntriesSetCompletedEventArgs)
    
    Partial Public Class listDomainsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub listDomainsCompletedEventHandler(ByVal sender As Object, ByVal args As listDomainsCompletedEventArgs)
    
    Partial Public Class getDomainsHierarchyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As DomainDescription
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), DomainDescription)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getDomainsHierarchyCompletedEventHandler(ByVal sender As Object, ByVal args As getDomainsHierarchyCompletedEventArgs)
    
    Partial Public Class getAllResultsIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getAllResultsIdsCompletedEventHandler(ByVal sender As Object, ByVal args As getAllResultsIdsCompletedEventArgs)
    
    Partial Public Class getResultsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getResultsCompletedEventHandler(ByVal sender As Object, ByVal args As getResultsCompletedEventArgs)
End Namespace
