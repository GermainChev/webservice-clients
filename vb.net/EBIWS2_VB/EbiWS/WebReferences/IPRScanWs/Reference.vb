'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Mono Runtime Version: 2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Explicit On
Option Strict On


Namespace EbiWs.IPRScanWs
    
    '''<remarks/>
    <System.Web.Services.WebServiceBinding(Name:="JDispatcherServiceHttpPort", Namespace:="http://soap.jdispatcher.ebi.ac.uk"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JDispatcherService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private runOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getResultTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getResultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getParametersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getParameterDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Public Sub New()
            MyBase.New
            Me.Url = "http://www.ebi.ac.uk/Tools/services/soap/iprscan"
        End Sub
        
        Public Sub New(ByVal url As String)
            MyBase.New
            Me.Url = url
        End Sub
        
        Public Event runCompleted As runCompletedEventHandler
        
        Public Event getStatusCompleted As getStatusCompletedEventHandler
        
        Public Event getResultTypesCompleted As getResultTypesCompletedEventHandler
        
        Public Event getResultCompleted As getResultCompletedEventHandler
        
        Public Event getParametersCompleted As getParametersCompletedEventHandler
        
        Public Event getParameterDetailsCompleted As getParameterDetailsCompletedEventHandler
        
        '''<remarks>
'''Submit an analysis job
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Run", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function run(ByVal email As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal title As String, ByVal parameters As InputParameters) As <System.Xml.Serialization.XmlElementAttribute("jobId")> String
            Dim results As Object() = Me.Invoke("run", New Object() {email, title, parameters})
            Return CType(results(0), String)
        End Function
        
        Public Function Beginrun(ByVal email As String, ByVal title As String, ByVal parameters As InputParameters, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("run", New Object() {email, title, parameters}, callback, asyncState)
        End Function
        
        Public Function Endrun(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub runAsync(ByVal email As String, ByVal title As String, ByVal parameters As InputParameters)
            Me.runAsync(email, title, parameters, Nothing)
        End Sub
        
        Public Overloads Sub runAsync(ByVal email As String, ByVal title As String, ByVal parameters As InputParameters, ByVal userState As Object)
            If (Me.runOperationCompleted Is Nothing) Then
                Me.runOperationCompleted = New System.Threading.SendOrPostCallback(Me.OnrunCompleted)
            End If
            Me.InvokeAsync("run", New Object() {email, title, parameters}, Me.runOperationCompleted, userState)
        End Sub
        
        Private Sub OnrunCompleted(ByVal arg As Object)
            If (Not (Me.runCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent runCompleted(Me, New runCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''Get the status of a submitted job
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetStatus", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getStatus(ByVal jobId As String) As <System.Xml.Serialization.XmlElementAttribute("status")> String
            Dim results As Object() = Me.Invoke("getStatus", New Object() {jobId})
            Return CType(results(0), String)
        End Function
        
        Public Function BegingetStatus(ByVal jobId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getStatus", New Object() {jobId}, callback, asyncState)
        End Function
        
        Public Function EndgetStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String)
        End Function
        
        Public Overloads Sub getStatusAsync(ByVal jobId As String)
            Me.getStatusAsync(jobId, Nothing)
        End Sub
        
        Public Overloads Sub getStatusAsync(ByVal jobId As String, ByVal userState As Object)
            If (Me.getStatusOperationCompleted Is Nothing) Then
                Me.getStatusOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetStatusCompleted)
            End If
            Me.InvokeAsync("getStatus", New Object() {jobId}, Me.getStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStatusCompleted(ByVal arg As Object)
            If (Not (Me.getStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStatusCompleted(Me, New getStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''Get the list of renderers available to output a job result (i.e. the list of available output types)
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResultTypes", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getResultTypes(ByVal jobId As String) As <System.Xml.Serialization.XmlArray(ElementName:="resultTypes"), System.Xml.Serialization.XmlArrayItem(ElementName:="type", IsNullable:=false)> wsResultType()
            Dim results As Object() = Me.Invoke("getResultTypes", New Object() {jobId})
            Return CType(results(0), wsResultType())
        End Function
        
        Public Function BegingetResultTypes(ByVal jobId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getResultTypes", New Object() {jobId}, callback, asyncState)
        End Function
        
        Public Function EndgetResultTypes(ByVal asyncResult As System.IAsyncResult) As wsResultType()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), wsResultType())
        End Function
        
        Public Overloads Sub getResultTypesAsync(ByVal jobId As String)
            Me.getResultTypesAsync(jobId, Nothing)
        End Sub
        
        Public Overloads Sub getResultTypesAsync(ByVal jobId As String, ByVal userState As Object)
            If (Me.getResultTypesOperationCompleted Is Nothing) Then
                Me.getResultTypesOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetResultTypesCompleted)
            End If
            Me.InvokeAsync("getResultTypes", New Object() {jobId}, Me.getResultTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetResultTypesCompleted(ByVal arg As Object)
            If (Not (Me.getResultTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getResultTypesCompleted(Me, New getResultTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''Get a job result formatted using a particular renderer
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetResult", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getResult(ByVal jobId As String, ByVal type As String, <System.Xml.Serialization.XmlArray(IsNullable:=true), System.Xml.Serialization.XmlArrayItem(ElementName:="parameter", IsNullable:=false)> ByVal parameters As wsRawOutputParameter()) As <System.Xml.Serialization.XmlElementAttribute("output", IsNullable:=true)> Byte()
            Dim results As Object() = Me.Invoke("getResult", New Object() {jobId, type, parameters})
            Return CType(results(0), Byte())
        End Function
        
        Public Function BegingetResult(ByVal jobId As String, ByVal type As String, ByVal parameters As wsRawOutputParameter(), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getResult", New Object() {jobId, type, parameters}, callback, asyncState)
        End Function
        
        Public Function EndgetResult(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), Byte())
        End Function
        
        Public Overloads Sub getResultAsync(ByVal jobId As String, ByVal type As String, ByVal parameters As wsRawOutputParameter())
            Me.getResultAsync(jobId, type, parameters, Nothing)
        End Sub
        
        Public Overloads Sub getResultAsync(ByVal jobId As String, ByVal type As String, ByVal parameters As wsRawOutputParameter(), ByVal userState As Object)
            If (Me.getResultOperationCompleted Is Nothing) Then
                Me.getResultOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetResultCompleted)
            End If
            Me.InvokeAsync("getResult", New Object() {jobId, type, parameters}, Me.getResultOperationCompleted, userState)
        End Sub
        
        Private Sub OngetResultCompleted(ByVal arg As Object)
            If (Not (Me.getResultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getResultCompleted(Me, New getResultCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''List the names of the parameters available before submission
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameters", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getParameters() As <System.Xml.Serialization.XmlArray(ElementName:="parameters"), System.Xml.Serialization.XmlArrayItem(ElementName:="id", IsNullable:=false)> String()
            Dim results As Object() = Me.Invoke("getParameters", New Object((0) - 1) {})
            Return CType(results(0), String())
        End Function
        
        Public Function BegingetParameters(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getParameters", New Object((0) - 1) {}, callback, asyncState)
        End Function
        
        Public Function EndgetParameters(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), String())
        End Function
        
        Public Overloads Sub getParametersAsync()
            Me.getParametersAsync(Nothing)
        End Sub
        
        Public Overloads Sub getParametersAsync(ByVal userState As Object)
            If (Me.getParametersOperationCompleted Is Nothing) Then
                Me.getParametersOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetParametersCompleted)
            End If
            Me.InvokeAsync("getParameters", New Object((0) - 1) {}, Me.getParametersOperationCompleted, userState)
        End Sub
        
        Private Sub OngetParametersCompleted(ByVal arg As Object)
            If (Not (Me.getParametersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getParametersCompleted(Me, New getParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks>
'''Get some details about a parameter (e.g. name, description, values, etc.)
'''</remarks>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetParameterDetails", RequestNamespace:="http://soap.jdispatcher.ebi.ac.uk", ResponseNamespace:="http://soap.jdispatcher.ebi.ac.uk", ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getParameterDetails(ByVal parameterId As String) As <System.Xml.Serialization.XmlElementAttribute("parameterDetails")> wsParameterDetails
            Dim results As Object() = Me.Invoke("getParameterDetails", New Object() {parameterId})
            Return CType(results(0), wsParameterDetails)
        End Function
        
        Public Function BegingetParameterDetails(ByVal parameterId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getParameterDetails", New Object() {parameterId}, callback, asyncState)
        End Function
        
        Public Function EndgetParameterDetails(ByVal asyncResult As System.IAsyncResult) As wsParameterDetails
            Dim results As Object() = Me.EndInvoke(asyncResult)
            Return CType(results(0), wsParameterDetails)
        End Function
        
        Public Overloads Sub getParameterDetailsAsync(ByVal parameterId As String)
            Me.getParameterDetailsAsync(parameterId, Nothing)
        End Sub
        
        Public Overloads Sub getParameterDetailsAsync(ByVal parameterId As String, ByVal userState As Object)
            If (Me.getParameterDetailsOperationCompleted Is Nothing) Then
                Me.getParameterDetailsOperationCompleted = New System.Threading.SendOrPostCallback(Me.OngetParameterDetailsCompleted)
            End If
            Me.InvokeAsync("getParameterDetails", New Object() {parameterId}, Me.getParameterDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetParameterDetailsCompleted(ByVal arg As Object)
            If (Not (Me.getParameterDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getParameterDetailsCompleted(Me, New getParameterDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.[Error], invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
    End Class
    
    '''<remarks>
'''Input parameters for the tool
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class InputParameters
        
        '''<remarks>
'''nocrc [Does not perform a crc64 check on the protein sequence]
'''</remarks>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, DataType:="boolean")>  _
        Public nocrc As System.Nullable`1
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnore()>  _
        Public nocrcSpecified As Boolean
        
        '''<remarks>
'''GO terms [Switch on look-up of corresponding Gene Ontology annotations]
'''</remarks>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true, DataType:="boolean")>  _
        Public goterms As System.Nullable`1
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnore()>  _
        Public gotermsSpecified As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArray(IsNullable:=true)>  _
        Public appl As String()
        
        '''<remarks>
'''Sequence [The query sequence can be entered directly into this form. The sequence can be be in GCG, FASTA, EMBL, GenBank, PIR, NBRF, PHYLIP or UniProtKB/Swiss-Prot format. A partially formatted sequence is not accepted. Adding a return to the end of the sequence may help certain applications understand the input. Note that directly using data from word processors may yield unpredictable results as hidden/control characters may be present.]
'''</remarks>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public sequence As String
    End Class
    
    '''<remarks>
'''Details about a renderer used to output the result of the job
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class wsResultType
        
        '''<remarks>
'''A short description of the renderer
'''</remarks>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public description As String
        
        '''<remarks>
'''A suggested file suffix to be used when saving the data formatted by the renderer
'''</remarks>
        Public fileSuffix As String
        
        '''<remarks>
'''The renderer identifier to be used when invoking the getResult() method
'''</remarks>
        Public identifier As String
        
        '''<remarks>
'''A more appropriate name for the renderer (more meaningful than the identifier)
'''</remarks>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public label As String
        
        '''<remarks>
'''The media type (MIME) of the renderer's output
'''</remarks>
        Public mediaType As String
    End Class
    
    '''<remarks>
'''A parameter used by the renderer
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class wsRawOutputParameter
        
        '''<remarks>
'''The name of the parameter
'''</remarks>
        Public name As String
        
        '''<remarks/>
        Public value As String()
    End Class
    
    '''<remarks>
'''Details about a tool parameter
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class wsParameterDetails
        
        '''<remarks>
'''The name of the parameter
'''</remarks>
        Public name As String
        
        '''<remarks>
'''A short description of the parameter
'''</remarks>
        Public description As String
        
        '''<remarks>
'''The type of the parameter
'''</remarks>
        Public type As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayItem(ElementName:="value", IsNullable:=false)>  _
        Public values As wsParameterValue()
    End Class
    
    '''<remarks>
'''The details about a parameter values
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class wsParameterValue
        
        '''<remarks>
'''A meaningful label for the parameter value
'''</remarks>
        Public label As String
        
        '''<remarks>
'''The real value
'''</remarks>
        Public value As String
        
        '''<remarks>
'''A flag indicating whether this value is a default value or not
'''</remarks>
        Public defaultValue As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayItem(ElementName:="property", IsNullable:=false)>  _
        Public properties As wsProperty()
    End Class
    
    '''<remarks>
'''A key/value pair association of information
'''</remarks>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(Namespace:="http://soap.jdispatcher.ebi.ac.uk")>  _
    Partial Public Class wsProperty
        
        '''<remarks/>
        Public key As String
        
        '''<remarks/>
        Public value As String
    End Class
    
    Partial Public Class runCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub runCompletedEventHandler(ByVal sender As Object, ByVal args As runCompletedEventArgs)
    
    Partial Public Class getStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getStatusCompletedEventHandler(ByVal sender As Object, ByVal args As getStatusCompletedEventArgs)
    
    Partial Public Class getResultTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As wsResultType()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), wsResultType())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getResultTypesCompletedEventHandler(ByVal sender As Object, ByVal args As getResultTypesCompletedEventArgs)
    
    Partial Public Class getResultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Byte())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getResultCompletedEventHandler(ByVal sender As Object, ByVal args As getResultCompletedEventArgs)
    
    Partial Public Class getParametersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), String())
            End Get
        End Property
    End Class
    
    Public Delegate Sub getParametersCompletedEventHandler(ByVal sender As Object, ByVal args As getParametersCompletedEventArgs)
    
    Partial Public Class getParameterDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results As Object()
        
        Friend Sub New(ByVal results As Object(), ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        Public ReadOnly Property Result() As wsParameterDetails
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), wsParameterDetails)
            End Get
        End Property
    End Class
    
    Public Delegate Sub getParameterDetailsCompletedEventHandler(ByVal sender As Object, ByVal args As getParameterDetailsCompletedEventArgs)
End Namespace
